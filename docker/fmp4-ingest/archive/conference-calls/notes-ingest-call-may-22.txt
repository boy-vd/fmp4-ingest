Sam Z (Microsoft)
John D (Microsoft)
Alex Giladi (Comcast)
Kevin Johns (Centurylink/SVA)
Will Law (Microsoft)
James G. (BBC)
Dirk  (Unified Streaming)
Arjen (Unified Streaming)
Patrick G. (Harmonic)
Nikos (MediaExcel)
Rufael (Unified Streaming)

Introduction, round call, 

feedback from Sam, author of smooth ingest protocol: 
        some of the ideas/history behind the smooth ingest are the folliwing 
		- smooth ingest 2009, large project for NBC 
		- connects encoders to cloud
		- some support for late binding (streams joining late)
		- flexible and robust, first use case for NBC
		- live, different angles, voice overs
		- high availability, server side redundancy
		- something easy for the encoder vendors to implement
		- discussions with Kilroy on smooth/DASH ingesat, 
		   current draft spec combines smooth ingest
		  and dash type ingest. It is suggested that the combination does not work so well
		  and that it might be better to separate them in profiles, both are valid scenarios
		  in the smooth ingest the encoder typically does not have a global overview, 
		  while in DASH ingest it might have more of an idea what kind of streams the clients need
		  - DASH ingest -> client facing view, grouping of tracks 
		  - smooth ingest -> encoder does not have a global overview, sends content downstream 
		  merging the two together gives overhead, i.e. moov box and manifest and empty post / mfra signal
		  redundant information. FMP4 and DASH XML have a lot of overlap in information. Moov 
		  box can be converted to DASH in Azure media services. 
		  - The long running post does not give error codes like introduced in the draft spec, 
		    empty post and mfra used to test health and close connection gracefully, draft spec considers short running posts with error codes 
	      - multiple post, short posts may also have some engineering challenges, such as for example multiple HTTP session 
		  It is suggested to use two profiles, use cases/examples might be helpful 
		  Arjen's response: it would be nice to develop the profiles and requirements based on the use cases also considering 
		  long running and short running posts. Unified Streaming largely similar experiences compared to Microsoft on ingest
		  
		  Will law: DASH manifest ingest + segments is ok to ingest to client/CDN, originally proposed by 
		  Akamai who do not use this processing in the network, but instead a pass through delivery without
		  origin servers.  
		  Sam: DASH manifest + segments encoder /server/CDN ok when encoder has global view, otherwise
		  smooth ingest -> streaming end point creates the final manifests
		  single bit-rate contribution is another use case, where the publishing point transcodes streams
		  for low latency, more discussion might be needed, more than small segment sizes might be considered
		  such as chunked encoding, long running post etc. (DASH-IF has activity on this)
		  - non optimal to have two use cases, push to origin server and pass through in one spec, two profiles in the spec 
		    should be developed to adress these two, yet perhaps more care should also be taken to adress other use cases/requirements
		  - question on scalability and using short running post with smooth from Rufael sam answers smooth can adress short running post
		  by the failover methods, headers resending, etc,
          Will Law -> we should include the 8 years of experiences with ingest 
          SAm -> already some changes moving from servers to azure, this is an example of the evolution
          Rufael -> already quite some input delivered from for Example Will, kevin, JAmes
          Consensus -> we should aim to work at a best practice document  that includes lessons learned over the years aiming for best spec
		  Nikos -> more question on the detailed profiles, agrees that in some cases the encoder does not have 
		  the global overview, and in some cases it does have this overview. Reaction from Arjen, another difference in 
		  the DASH ingest and smooth ingest is that in the DASH ingest naming conventions will be much more important
		  each segment needs to be uploaded with the right naming convention. From MediaExcel side having both 
		  options is not a concern as it is understood that both these use cases need to be adressed. 
		  
		  Comment from John and Sam: especially high availability will be important, in this case it might be 
		  a luxury to update the manifest, instead a high profile server is used to do the client facing work
		  
		  Kevin Johns provides some feedback from the live working group at the streaming video alliance having read the document
		          - questions on the suitability with the non co-located packager (i.e. latency etc.)
				  - faster protocols are mentioned like SRT, some questions on the usage of HTTP 
				  - Industry survey -> which groups worked on the problem might be relevant for the document
          		  
		  JAmes (BBC R&D) provides some feedback regarding these questions. 
		            - I could not hear in detail will add the list after feedback from James  
https://www.digitalproductionpartnership.co.uk/what-were-working-on/uk-specification-live-ip-contribution/
https://www.digitalproductionpartnership.co.uk/what-were-working-on/uk-specification-for-ip-feeds/
                     SMPTE 2110
					- Believes HTTP is still a right solution, Smooth/HLS show they can survive the ecosystems, web pages 
					  also show evidence of benefit of HTTP. Middlebox/routing is easier with HTTP, new techniques 
					  are being introduced like HTTP PUSH etc possibly facilitating low latency
		   Sam ->    two aspects at stake the binary (fMP4 layer) and the transport layer (both HTTP/TCP) 
		             an important aspect is using fragmented MPEG4 which makes it much easier to detect boundaries
					 and handling stream failures (by retransmission), this is an advantage compared to for example 
					 the case when multiple streams are multiplexed in MPEG-2 TS and it becomes unclear how to handle failures 
					 that happen in the Internet like connection failures, packet loss, loss of reachability. etc. 
					 The usage of fragmented MPEG-4 in well defined manner will pose key advantages for the ingest. 
					 Regarding the transport method, it can later be updated to work with newer protocols such as quic , HTTP 2.0 
					 
			Kevin ->  agrees on this issue, and confirms that many problems in practice related to the bitstream format 
			         containing the media, in case network connectivity issues are the problem, this is typically somewhat 
					 easier to fix by changing servers/cables, location, firewall etc. Kevin argues that a clear motivation statement 
					 in the document would help readers to understand from the beginning the motivation of this work and 
					 the approach taken. In other words, more of the motivations from Sam and James should be reflected in the 
					 introduction/body of the document. 
			
			John raises question on the targeted standardization body for this work, Rufael asks the return question, the decision
			was to go through DASH-IF and MPEG later on as the best representation was there (this was an earlier decision 
			recapped by James). Microsoft raised some initial concerns about MPEG and were this body is headed. 
			AOM/SVA seem alternatives, in SVA already some work in this direction was started by having a live working group. 
			Unified Streaming will initiate a poll to better understand the different options. Microsoft will double check on their side. 

        Next action point concerns on scheduling the next call, Rufael proposes to schedule the next call in 2-3 weeks time, in the 
        mean time Unified Streaming will initiate the work on the github and will make the version available on github so change request 
        can be merged more easily. Once this new version is done it can be published as a work in progress on the ietf reflecting also the 
        aspects discussed in this call. This was agreed upon, Unified AP to schedule the next call and initiate the work on the next version of the document on github 
		in collaboration with the partners. 		
